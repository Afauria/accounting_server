<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zwy.accounting.dao.ProjectEntityMapper">
    <resultMap id="BaseResultMap" type="com.zwy.accounting.entity.ProjectEntity">
        <result column="project_id" property="projectId" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="repo" property="repo" jdbcType="VARCHAR"/>
        <result column="branch" property="branch" jdbcType="VARCHAR"/>
        <result column="cur_version" property="curVersion" jdbcType="VARCHAR"/>
        <result column="build_status" property="buildStatus" jdbcType="INTEGER"/>
        <result column="integrate_status" property="integrateStatus" jdbcType="INTEGER"/>
        <result column="descr" property="descr" jdbcType="VARCHAR"/>
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP"/>
        <result column="gmt_update" property="gmtUpdate" jdbcType="TIMESTAMP"/>
        <!--连表查询项目组件，将项目组件作为项目的List。-->
        <!--多表关联查询可以分为不同子表的查询，语句更简单-->
        <!--这里分开查询，细分业务，前端可以一次请求由Service层组装数据。也分两次请求。-->
        <!--<collection property="modules" ofType="com.zwy.accounting.model.response.ProjectModuleResp">-->
        <!--<id property="linkId" column="id"></id>-->
        <!--<result property="moduleBuildId" column="module_build_id"/>-->
        <!--<result property="moduleName" column="module_name"></result>-->
        <!--<result property="version" column="version"></result>-->
        <!--<result property="moduleId" column="module_id"></result>-->
        <!--</collection>-->
    </resultMap>
    <resultMap id="ProjectModulesMap" type="com.zwy.accounting.model.response.ProjectModuleResp">
        <result property="moduleBuildId" column="module_build_id"/>
        <result property="moduleName" column="module_name"></result>
        <result property="version" column="version"></result>
        <result property="projectId" column="project_id"></result>
        <result property="moduleId" column="module_id"></result>
        <result property="type" column="type"></result>
    </resultMap>

    <sql id="TABLE">
        t_project
    </sql>
    <sql id="COLUMN">
        t_project.project_id, name, repo, branch, cur_version, t_project.build_status, integrate_status, descr, t_project.gmt_create, gmt_update
    </sql>

    <update id="updateProject">
        update
        <include refid="TABLE"/>
        <set>
            `name` = #{name}, repo = #{repo}, branch = #{branch},
            <if test="descr!=null">descr = #{descr},</if>
        </set>
        where project_id = #{projectId}
    </update>

    <delete id="deleteProjectById">
        delete from
        <include refid="TABLE"/>
        where project_id = #{projectId}
    </delete>

    <insert id="insertProject" parameterType="com.zwy.accounting.entity.ProjectEntity" useGeneratedKeys="true"
            keyProperty="projectId">
        insert into
        <include refid="TABLE"/>
        (`name`, repo, branch, descr)
        values (#{name}, #{repo}, #{branch}, #{descr})
    </insert>

    <select id="selectProjects" resultMap="BaseResultMap">
        select
        <include refid="COLUMN"/>
        from
        <include refid="TABLE"/>
    </select>

    <select id="selectProjectByName" resultMap="BaseResultMap">
        select
        <include refid="COLUMN"/>
        from
        <include refid="TABLE"/>
        where name = #{name}
    </select>

    <select id="selectProjectById" resultMap="BaseResultMap">
        select
        <include refid="COLUMN"/>
        from
        <include refid="TABLE"/>
        where project_id = #{projectId}
    </select>

    <!--多表查询，查询项目组件，使用左连接，保留t_project的元组-->
    <!--不能使用natural join，因为gmt_create属性也是共有的，需要手动指定等值的列-->
    <!--<select id="selectProjectModuleById" resultMap="BaseResultMap">-->
    <!--select *-->
    <!--from t_project p-->
    <!--left join t_project_module pm on p.project_id = pm.project_id-->
    <!--left join t_module_build m on pm.module_build_id = m.module_build_id-->
    <!--where p.project_id = #{projectId}-->
    <!--</select>-->

    <!--查询该项目的所有组件-->
    <select id="selectProjectModuleById" resultMap="ProjectModulesMap">
        select *
        from t_project_module p natural join t_module_build
        where p.project_id = #{projectId}
    </select>

    <update id="updateBuildStatus">
        update
        <include refid="TABLE"/>
        set build_status = #{buildStatus}
        where project_id = #{projectId}
    </update>

    <update id="updateIntegrateStatus">
        update
        <include refid="TABLE"/>
        set integrate_status = #{integrateStatus}
        where project_id = #{projectId}
    </update>

    <!--添加关联关系-->
    <insert id="addProjectModule">
        insert into t_project_module
        (project_id, module_build_id, type)
        values (#{projectId}, #{moduleBuildId}, #{type})
    </insert>
    <!--插入项目组件关联前先判断是否存在关联关系，返回关联关系id-->
    <select id="selectLink" resultType="java.lang.Integer">
        select id
        from t_project_module
            natural join t_module_build
        where project_id = #{projectId}
              and module_id in
                  (select module_id
                   from t_module_build
                   where module_build_id = #{moduleBuildId})
    </select>
    <!--如果已经存在关联，则修改关联关系-->
    <update id="updateProjectModule">
        update t_project_module
        <set>
            project_id = #{projectId}, module_build_id = #{moduleBuildId},
            <if test="type != null">type = #{type}</if>
        </set>
        where id = #{linkId}
    </update>
    <!--删除关联关系-->
    <delete id="deleteProjectModule">
        delete from t_project_module
        where project_id = #{projectId} and module_build_id = #{moduleBuildId}
    </delete>
</mapper>